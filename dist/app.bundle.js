!function(t){var e={};function i(s){if(e[s])return e[s].exports;var o=e[s]={i:s,l:!1,exports:{}};return t[s].call(o.exports,o,o.exports,i),o.l=!0,o.exports}i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)i.d(s,o,function(e){return t[e]}.bind(null,o));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){"use strict";i.r(e);const s=30,o=10,h=20,l=30,r=30,c={o:"#FBC02D",i:"#0097A7",s:"#4CAF50",z:"#F44336",l:"#FF9800",j:"#2196F3",t:"#9C27B0"},a={o:[[[1,1],[1,1]]],i:[[[1,1,1,1]],[[1],[1],[1],[1]]],s:[[[0,1],[1,1],[1]],[[1,1],[0,1,1]]],z:[[[1],[1,1],[0,1]],[[0,1,1],[1,1]]],l:[[[1,1,1],[0,0,1]],[[1,1],[1],[1]],[[1],[1,1,1]],[[0,1],[0,1],[1,1]]],j:[[[0,0,1],[1,1,1]],[[1,1],[0,1],[0,1]],[[1,1,1],[1]],[[1],[1],[1,1]]],t:[[[1,0],[1,1],[1]],[[0,1],[1,1,1]],[[0,1],[1,1],[0,1]],[[1,1,1],[0,1]]]};class n{constructor(t,e,i=1){this.score=0,this.lineCleared=0,this.startLevel=i,this.level=i,this.velocity=.05*this.level,this.gameOver=!1,this.tetris=!1,this.x=t,this.y=e,this.width=s*o,this.height=s*h,this.color="#333",this.board=[];for(let t=0;t<h;t++){this.board.push([]);for(let e=0;e<o;e++)this.board[t].push(new u(this,e,t,"empty"))}this.spawnNewBlock()}draw(t,e=!1){t.strokeStyle=this.color,t.strokeRect(this.x,this.y,this.width,this.height),t.fillStyle="#333",t.font="24px monospace";let i=2*this.x+this.width;t.fillText("Level: ",i,2*this.y),t.fillText(this.level,i,3*this.y),t.fillText("Score: ",i,5*this.y),t.fillText(this.score,i,7*this.y),t.fillText("Lines:",i,9*this.y),t.fillText(this.lineCleared,i,11*this.y),t.fillText("Next: ",i,13*this.y),this.board.forEach(e=>{e.forEach(e=>{e.draw(t)})}),e||(this.nextBlock.draw(t),this.activeBlock.draw(t))}handleAction(t){if(!this.gameOver){if(Object.keys(t).forEach(e=>{if(t[e]){if(this.activeBlock.collideCounter>0&&"down"===e)"down"===e&&(this.activeBlock.collideCounter=l);else{let t=this.activeBlock.move(e);t.blocks.every(t=>this.isValid(t))&&(this.activeBlock=t)}t[e]=!1}}),this.activeBlock.blocks.some(t=>this.collide(t)))this.activeBlock.collideCounter++,this.activeBlock.collideCounter>=l&&(this.activeBlock.blocks.forEach(t=>{let e=Math.round(t.y);t.y=e,this.board[t.y][t.x]=t}),this.spawnNewBlock());else{let t=this.activeBlock.move();t.blocks.every(t=>this.isValid(t))&&(this.activeBlock=t)}this.clearLine()}}clearLine(){let t=0;this.board.forEach((e,i)=>{if(e.every(t=>"empty"!==t.type)){t++;let e=[];for(let t=0;t<o;t++)e.push(new u(this,t,0,"empty"));for(let t=i;t>0;t--){let e=this.board[t-1];e.forEach(t=>{t.y=t.y+1}),this.board[t]=e}this.board[0]=e}}),t>0&&(this.tetris&&4===t&&(this.score+=400),this.tetris=4===t,this.score+=100*Math.pow(2,t-1)),this.lineCleared+=t,this.level=this.startLevel+Math.floor(this.lineCleared/r),this.velocity=.05*this.level}isValid(t){let e=Math.round(t.y),i=t.x;return i>=0&&i<=o-1&&e<h&&e>=0&&"empty"===this.board[e][i].type}collide(t){let e=Math.floor(t.y),i=t.x;return e>=h-1||this.board[e+1][i]&&"empty"!==this.board[e+1][i].type}spawnNewBlock(){let t=Object.keys(a),e=t[Math.floor(Math.random()*t.length)];this.activeBlock?this.activeBlock=new d(this,this.nextBlock.shape):(this.activeBlock=new d(this,e),e=t[Math.floor(Math.random()*t.length)]);const i={x:2*this.x+this.width,y:14*this.y,velocity:0};this.nextBlock=new d(i,e,0,1,0),this.activeBlock.blocks.some(t=>this.collide(t))&&(this.gameOver=!0)}}class d{constructor(t,e,i=0,s=4,o=0){this.board=t,this.shape=e,this.blocks=[],this.shapeIndex=i,this.collideCounter=0;let h=a[this.shape][i];h.forEach((e,i)=>{e.forEach((e,l)=>{1===h[i][l]&&this.blocks.push(new u(t,s+i,o+l,this.shape))})})}move(t=""){if("rotate"===t){let t=this.blocks[0].x,e=this.blocks[0].y,i=this.shapeIndex===a[this.shape].length-1?0:this.shapeIndex+1;return new d(this.board,this.shape,i,t,e)}if("drop"===t){let t=this.move();return t.collideCounter=l,t}let e=Object.assign(Object.create(this),this);return e.blocks=e.blocks.map(e=>e.move(t)),e}draw(t){this.blocks.forEach(e=>e.draw(t))}}class u{constructor(t,e=4,i=0,o="block"){this.board=t,this.x=e,this.y=i,this.width=s,this.height=s,this.type=o,this.color="empty"===this.type?"#ccc":c[o]}move(t){let e=Object.assign(Object.create(this),this);switch(t){case"left":e.x--;break;case"right":e.x++;break;case"down":e.y+=this.board.velocity+.2;break;default:e.y+=this.board.velocity}return e}draw(t){let e=this.board.x+this.x*s,i=this.board.y+this.y*s;t.fillStyle=this.color,t.fillRect(e,i,this.width,this.height),t.strokeStyle="#eee",t.strokeRect(e,i,this.width,this.height)}}const f={32:"drop",37:"left",38:"rotate",39:"right",40:"down",72:"left",74:"down",75:"rotate",76:"right"},y=document.querySelector("#main"),b=y.getContext("2d");let p=new n(20,20);p.draw(b,!0);const v=document.querySelector("#start"),k=document.querySelector("#host"),w=document.querySelector("#connect");v.addEventListener("click",()=>{!function(){const t={};p=new n(20,20),document.addEventListener("keydown",e=>{let i=f[e.which];""!==i&&(e.preventDefault(),e.stopPropagation()),t[i]=!0}),function e(){p.gameOver?(v.disabled=!1,k.disabled=!1,w.disabled=!1):(window.requestAnimationFrame(e),p.handleAction(t),function(t,e,i){e.clearRect(0,0,t.width,t.height),i.draw(e)}(y,b,p))}()}(),v.disabled=!0,k.disabled=!0,w.disabled=!0})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,